package org.hammerlab.bam

import java.io.ByteArrayOutputStream
import java.security.Permission

import caseapp.CaseApp
import org.hammerlab.test.Suite

case class ExitException(status: Int)
  extends SecurityException("System.exit() is not allowed")

sealed class NoExitSecurityManager extends SecurityManager {
  override def checkPermission(perm: Permission): Unit = {}

  override def checkPermission(perm: Permission, context: Object): Unit = {}

  override def checkExit(status: Int): Unit = {
    super.checkExit(status)
    throw ExitException(status)
  }
}

class MainTest
  extends Suite {

  override def beforeAll(): Unit = System.setSecurityManager(new NoExitSecurityManager())

  override def afterAll(): Unit = System.setSecurityManager(null)

  def check(app: CaseApp[_])(args: String*)(expected: String): Unit = {
    val stream = new ByteArrayOutputStream()
    Console.withOut(stream) {
      intercept[ExitException] {
        app.main(
          args.toArray
        )
      }
      .status should be(0)
      stream.toString should be(expected.stripMargin)
    }
  }

  def check(args: String*)(expected: String): Unit = {
    val stream = new ByteArrayOutputStream()
    Console.withOut(stream) {
      intercept[ExitException] {
        Main.main(
          args.toArray
        )
      }
      .status should be(0)
      stream.toString should be(expected.stripMargin)
    }
  }

  test("help") {
    check(
      "-h"
    )(
      """DefaultBaseCommand
        |Usage: default-base-command [options] [command] [command-options]
        |
        |Available commands: check, compare-splits, compute-splits, full-check, htsjdk-rewrite, index-blocks, index-records
        |
        |Type  default-base-command command --help  for help on an individual command
        |"""
    )
  }

  test("check help") {
    check(
      "check", "-h"
    )(
      """Command: check
        |Usage: default-base-command check 
        |  --bgzf-block-headers-to-check | -g  <value>
        |        When searching for BGZF-block boundaries, look this many blocks ahead to verify that a candidate is a valid block. In general, probability of a false-positive is 2^(-32N) for N blocks of look-ahead
        |  --ranges | -i  <value>
        |        Comma-separated list of byte-ranges to restrict to; when specified, only BGZF blocks whose starts are in this set will be considered. Allowed formats: <start>-<end>, <start>+<length>, <position>. All values can take integer or byte-shorthand (e.g. "10m") values.
        |  --blocks | -k  <value>
        |        File with bgzf-block-start positions as output by IndexBlocks; if one doesn't exist, use a parallel search for BGZF blocks (see bgzfBlockHeadersToCheck)
        |  --split-size | -m  <value>
        |        Maximum Hadoop split-size; if unset, default to underlying FileSystem's value
        |  --records | -r  <value>
        |        file with BAM-record-start positions as output by IndexRecords
        |  --warn  
        |        Set the root logging level to WARN; useful for making Spark display the console progress-bar in client-mode
        |  --print-limit | -l  <value>
        |        When collecting samples of records/results for displaying to the user, limit to this many to avoid overloading the driver
        |  --path | -o  <value>
        |        Print output to this file, otherwise to stdout
        |  --eager | -e  
        |        When set, run the "eager" checker, either against the "seqdoop" checker (if the --seqdoop / -s flag is passed), or against a ground truth indicated by a .records file generated by index-records. Passing neither the eager nor seqdoop flags has the same effect as passing both: they are run against each other
        |  --results-per-partition | -q  <value>
        |        After running eager and/or seqdoop checkers over a BAM file and filtering to just the contested positions, repartition to have this many records per partition. Typically there are far fewer records at this stage, so it's useful to coalesce down to avoid 1,000's of empty partitions
        |  --seqdoop | -s  
        |        When set, run the "seqdoop" checker, either against the "eager" checker (if the --eager / -e flag is passed), or against a ground truth indicated by a .records file generated by index-records. Passing neither the eager nor seqdoop flags has the same effect as passing both: they are run against each other
        |
        |"""
    )
  }

  test("htsjdk-rewrite help") {
    check(
      rewrite.Main
    )(
      "-h"
    )(
      """Rewrite BAM file with HTSJDK; records not aligned to BGZF-block boundaries
        |Usage: â€¦ org.hammerlab.bam.rewrite.Main [options]
        |  --usage  
        |        Print usage and exit
        |  --help | -h  
        |        Print help message and exit
        |  --start | -s  <value>
        |  --end | -e  <value>
        |  --overwrite | -f  
        |  --index-blocks | -b  
        |  --index-records | -r  
        |
        |"""
    )
  }

  test("htsjdk-rewrite cmd help") {
    check(
      "htsjdk-rewrite", "-h"
    )(
      """Command: htsjdk-rewrite
        |Usage: default-base-command htsjdk-rewrite 
        |  --start | -s  <value>
        |  --end | -e  <value>
        |  --overwrite | -f  
        |  --index-blocks | -b  
        |  --index-records | -r  
        |
        |"""
    )
  }
}
